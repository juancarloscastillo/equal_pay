# - Año 2016 es el más relevante
#******************************************************************************************
# Oferta Académica 2010 - 2019
# - Arancel
# - Costo de Titulación
# - Puntaje Corte
# - % PSU por cada carrera
# - Matricula Anual
# - Vacante Semestre 01 y 02
oferta1 <- fread(here("data","OfertaAcademica","OFICIAL_OA_2010_AL_2019_21_01_2019_V1.csv"))
# Matricula  - info Carreras 2007 - 2018
# - % por género
# - Seleccionar agno **2015**
matr1 <- fread(here("data","Matricula","MATRICULA_2007_AL_2018_SIES_28062018.csv"))
# Mi futuro - Mercado laboral -  Estadísticas por carrera
# - Tramos de Ingreso año 1 a 5
# - Los ingresos al 1er año después de su titulación corresponden al promedio de ingresos percibidos por las cohortes de titulados 2014, 2015 y ***2016***
# - Empleabilidad año **1** y 2
estcarreras18 <- readxl::read_excel(here("data","MiFuturo","estadisticas_por_carrera_2018b.xlsx"))
# Mi futuro - info carreras  2018
# - % PSU
# - N matricula por género
# - Arancel Anual
# - Costo de Titulación
# - Titulación por género
# - Rango de ingresos al Primero año de titulación
mifut18 <- readxl::read_excel(here("data","MiFuturo","buscador_de_carreras_2018.xlsx"))
mifut19 <- readxl::read_excel(here("data","MiFuturo","buscador_de_carreras_2019.xlsx"))
# Mi futuro - Mercado laboral
# - Empleabilidad al primer año
# - Ingreso Promedio al 4to año de titulación
merlab18 <- readxl::read_excel(here("data","MiFuturo","buscador_empleabilidad_e_ingresos_2018.xlsx"))
# Postulaciones -  base PSU 2016
# - Código DEMRE
postu16 <- fread(here("data","psu","C_POSTULACIONES_SELECCION_PSU_2016_PRIV_MRUN.csv"))
postu16$CODIGO_CARRERA # CODIGO DEMRE, SON LO MISMO
postu16$CODIGO_CARRERA<- as.numeric(postu16$CODIGO_CARRERA)
# Postulaciones -  base matricula 2015
# - Código DEMRE
mat2015 <- fread(here("data","psu","D_MATRICULA_PSU_2015_PRIV_MRUN.csv"))
mat2015$CODIGO_CARRERA # CODIGO DEMRE, SON LO MISMO
mat2015$CODIGO_CARRERA<- as.numeric(mat2015$CODIGO_CARRERA)
# Base Con carrera homologada e información de carreras, mercado laboral.
carhomo <- readxl::read_excel(here("data","custom","base_carhomo.xlsx"))
carhomo <- rename(carhomo,DEMRE=CODIGO_CARRERA)
#********************************************************************************************************************************
# CODIGO ************************************************************************************************************************
#********************************************************************************************************************************
# - Identificador DEMRE
of1 <- oferta1 %>% filter(PONDERACION_LENGUAJE>0 & PONDERACION_MATEMATICAS>0 & AÑO==2016 & NIVEL_GLOBAL=="Pregrado"& TIPO_IES %in% c("A","B","C") & TIPO_CARRERA == "Plan Regular")
of1 <- of1 %>% filter(DEMRE %in% postu16$CODIGO_CARRERA)
instituciones <- of1 %>% group_by(CODIGO_IES,NOMBRE_IES) %>% summarise(n=n())
# - 43 instituciones Universitarias
codigos             <- of1 %>% select(starts_with(match = "COD"), JORNADA,VERSION,NOMBRE_IES, NOMBRE_CARRERA)
carreras            <- of1 %>% group_by(NOMBRE_CARRERA) %>% summarise(n=n()) %>% select(-n)
carreras            <- tibble::rowid_to_column(carreras, "ID_CARRERA")
carreras$ID_CARRERA <- stringr::str_pad(carreras$ID_CARRERA,width = 4, pad = "0")
# xlsx::write.xlsx(carreras,file = "cod_carrera.xlsx")
of1_a <- left_join(x = of1,y = carreras,"NOMBRE_CARRERA")
# - Ahora tenemos un ID_CARRERA independiente de la institución
# Remplazar tildes y caracteres español *********************************************************************************************
of1_a$AREA_CARRERA_GENERICAb <-toupper(of1_a$AREA_CARRERA_GENERICA)
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "Á",replacement = "A")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "É",replacement = "E")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "Í",replacement = "I")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "Ó",replacement = "O")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "Ú",replacement = "U")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "Ñ",replacement = "N")
of1_a$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = of1_a$AREA_CARRERA_GENERICAb,pattern = "/",replacement = "_")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = " ",replacement = "_")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "Á",replacement = "A")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "É",replacement = "E")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "Í",replacement = "I")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "Ó",replacement = "O")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "Ú",replacement = "U")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "Ñ",replacement = "N")
names(of1_a)<- stringr::str_replace_all(string = names(of1_a),pattern = "/",replacement = "_")
# Revisión Tabla agrupada de códigos de carrera ************************************************************************************
# areascon <- of1_a %>% group_by(NOMBRE_CARRERA,ID_CARRERA,OECD_SUBAREA,AREA_CARRERA_GENERICA,AREA_CARRERA_GENERICAb) %>%  summarise(n=n())
# Remplazar tildes y caracteres español *********************************************************************************************
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "Á",replacement = "A")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "É",replacement = "E")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "Í",replacement = "I")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "Ó",replacement = "O")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "Ú",replacement = "U")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "Ñ",replacement = "N")
# areascon$AREA_CARRERA_GENERICAb <- stringr::str_replace_all(string = areascon$AREA_CARRERA_GENERICAb,pattern = "/",replacement = "_")
# areas1 <- areascon %>% group_by(AREA_CARRERA_GENERICA) %>% summarise(n=n())
# xlsx::write.xlsx(as.data.frame(areascon), file = "areas_carrera.xlsx")
# -  Con esta base se pueden ordenar las áreas que necesita Andrea
# Base de oferta 2016 es core ************** CODIGO_UNICO, DEMRE y AREA_CARRERA_GENERICA
# Base matricula 2015 ********************** CÓDIGO CARRERA
# Pegar of1_a hay que pegarsela matricula psu 2015 usando DEMRE *****  esto es una forma de tener DEMRE e ID_CARRERA juntos
# Luego ********************* cacular en base a ID_CARRERA %>% summarise(min() median() mean() sd() quantiles()) de PUNTAJE_PONDERADO
# - Percentil 10, 25, 50, 75, 90
# En carrerasISCED_desagregado está el código DEMRE para crear el área UNESCO de 14 categorías
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = " ",replacement = "_")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "Á",replacement = "A")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "É",replacement = "E")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "Í",replacement = "I")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "Ó",replacement = "O")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "Ú",replacement = "U")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "Ñ",replacement = "N")
names(matr1)<- stringr::str_replace_all(string = names(matr1),pattern = "/",replacement = "_")
# subset de matrícula con las variables de carreras del año 2015
mat1 <- matr1 %>% filter(ANO==2015)
mat1 <- rename(mat1,CODIGO_UNICO=CODIGO_CARRERA, AREA_CARRERA_GENERICA_MATR=AREA_CARRERA_GENERICA)
mat1 <- mat1 %>% filter(CODIGO_UNICO %in% of1_a$CODIGO_UNICO) #Filtrar según código DEMRE presente en la base OfertaAcadémica
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = " ",replacement = "_")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "Á",replacement = "A")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "É",replacement = "E")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "Í",replacement = "I")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "Ó",replacement = "O")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "Ú",replacement = "U")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "Ñ",replacement = "N")
names(mat1)<- stringr::str_replace_all(string = names(mat1),pattern = "/",replacement = "_")
mat1 <-  mat1 %>% select(CODIGO_UNICO,AREA_DEL_CONOCIMIENTO:AREA_CARRERA_GENERICA_MATR,TOTAL_MATRICULADOS:MATRICULADOS_HOMBRES_PRIMER_ANO)
# VERIFICAR VARIABLES EN:
# - of1_a
# - mat1
names(of1_a)
names(mat1)
names(carhomo)
rm(list=ls())
oferta1 <- fread(here("data","OfertaAcademica","OFICIAL_OA_2010_AL_2019_21_01_2019_V1.csv"))
# Matricula  - info Carreras 2007 - 2018
# - % por género
# - Seleccionar agno **2015**
matr1 <- fread(here("data","Matricula","MATRICULA_2007_AL_2018_SIES_28062018.csv"))
# Mi futuro - Mercado laboral -  Estadísticas por carrera
# - Tramos de Ingreso año 1 a 5
# - Los ingresos al 1er año después de su titulación corresponden al promedio de ingresos percibidos por las cohortes de titulados 2014, 2015 y ***2016***
# - Empleabilidad año **1** y 2
estcarreras18 <- readxl::read_excel(here("data","MiFuturo","estadisticas_por_carrera_2018b.xlsx"))
# Mi futuro - info carreras  2018
# - % PSU
# - N matricula por género
# - Arancel Anual
# - Costo de Titulación
# - Titulación por género
# - Rango de ingresos al Primero año de titulación
mifut18 <- readxl::read_excel(here("data","MiFuturo","buscador_de_carreras_2018.xlsx"))
mifut19 <- readxl::read_excel(here("data","MiFuturo","buscador_de_carreras_2019.xlsx"))
# Mi futuro - Mercado laboral
# - Empleabilidad al primer año
# - Ingreso Promedio al 4to año de titulación
merlab18 <- readxl::read_excel(here("data","MiFuturo","buscador_empleabilidad_e_ingresos_2018.xlsx"))
# Postulaciones -  base PSU 2016
# - Código DEMRE
postu16 <- fread(here("data","psu","C_POSTULACIONES_SELECCION_PSU_2016_PRIV_MRUN.csv"))
postu16$CODIGO_CARRERA # CODIGO DEMRE, SON LO MISMO
postu16$CODIGO_CARRERA<- as.numeric(postu16$CODIGO_CARRERA)
# Postulaciones -  base matricula 2015
# - Código DEMRE
mat2015 <- fread(here("data","psu","D_MATRICULA_PSU_2015_PRIV_MRUN.csv"))
mat2015$CODIGO_CARRERA # CODIGO DEMRE, SON LO MISMO
mat2015$CODIGO_CARRERA<- as.numeric(mat2015$CODIGO_CARRERA)
# Base Con carrera homologada e información de carreras, mercado laboral.
carhomo <- readxl::read_excel(here("data","custom","base_carhomo.xlsx"))
carhomo <- rename(carhomo,DEMRE=CODIGO_CARRERA)
# Oferta Académica 2010 - 2019
# - Arancel
# - Costo de Titulación
# - Puntaje Corte
# - % PSU por cada carrera
# - Matricula Anual
# - Vacante Semestre 01 y 02
oferta1 <- fread(here("data","OfertaAcademica","OFICIAL_OA_2010_AL_2019_21_01_2019_V1.csv"))
# Chunk 1
knitr::opts_chunk$set(echo = FALSE, warning = FALSE,message = FALSE)
options(scipen=999)
rm(list=ls())
# Chunk 2
{
library(dplyr)
library(here)
library(sjlabelled)
library(sjPlot)
library(ggplot2)
library(knitr)
library(kableExtra)
library(GPArotation)
library(lavaan)
library(semPlot)
library(Cairo);options(shiny.usecairo=TRUE) # Para la calidad de los plots
}
# Chunk 3: data
# issp99<- read_stata(path = here("data","issp1999.dta"))
# issp09<- read_stata(path = here("data","issp2009.dta"))
# issp19<- read_stata(path = here("data","issp2019.dta"))
# Chunk 4: seleccionar Chile
# cl99 <- issp99 %>% filter(v3==30)
# cl09 <- issp09 %>% filter(V4==152)
# cl19 <- issp19
# names(cl99) <- toupper(names(cl99))
# save(cl99,file = here("data","issp1999CL.RData"))
# save(cl09,file = here("data","issp2009CL.RData"))
# save(cl19,file = here("data","issp2019CL.RData"))
# # Load data ***************************************************************
# load(file = here("data","issp1999CL.RData"))
# load(file = here("data","issp2009CL.RData"))
# load(file = here("data","issp2019CL.RData"))
# Chunk 5: load data
load(file = here("data","issp1999CL.RData"))
load(file = here("data","issp2009CL.RData"))
load(file = here("data","issp2019CL.RData"))
# Chunk 6: salario percibido y justo 1999
salarios99 <- cl99 %>% select(V3,
V21,V16,    # Salario percibio obrero y gerente
V31,V26)# Salario justo    obrero y gerente
# M2_P2_PRESIDENTE cuanto gana GERENTE
# M2_P2_OBRERO cuanto gana OBRERO
# M2_P3_PRESIDENTE cuanto deberia ganar GERENTE
# M2_P3_OBRERO cuanto deberia ganar OBRERO
# table(salarios99$V21) #  99999999999
# table(salarios99$V16) #  99999999998 99999999999
# table(salarios99$V31) # 99999999998 99999999999
# table(salarios99$V26) # 99999999998 99999999999
salarios99$V21[salarios99$V21 %in% c(99999999998,99999999999)] <- NA
salarios99$V16[salarios99$V16 %in% c(99999999998,99999999999)] <- NA
salarios99$V31[salarios99$V31 %in% c(99999999998,99999999999)] <- NA
salarios99$V26[salarios99$V26 %in% c(99999999998,99999999999)] <- NA
salarios99$V3 <- as_character(salarios99$V3)
#--- Nombres sustantivos para analisis
salarios99 <- rename(salarios99,pais=V3,salperger=V16,salperobr=V21,saljusger=V26,saljusobr=V31)
# Chunk 7: remover outliers 1999
table(salarios99$salperobr) # <22000000 120000000
table(salarios99$saljusobr) # <30000000
table(salarios99$salperger)
table(salarios99$saljusger)
#Quitar outliers *************************
sal99 <- salarios99 %>% filter(salperobr<22000000 & saljusobr<30000000)
# Filtrato por outliers < a $22.000.000 en salario percibido obrero
# Filtrato por outliers < a $30.000.000 en salario justo obrero
sal99$gap_perc  <-  as.numeric(sal99$salperger/sal99$salperobr) # brecha total salario percibido
sal99$gap_just  <-  as.numeric(sal99$saljusger/sal99$saljusobr) # brecha total salario justo
# Chunk 8: gap salario 1999
#---Brecha salarial percibida
salarios99$gap_perc   <-  as.numeric(salarios99$salperger/salarios99$salperobr) # diferencia total
salarios99$lngap_perc <-  as.numeric(log(salarios99$gap_perc))                 # diferencia log
#---Brecha salarial justa
salarios99$gap_just   <-  as.numeric(salarios99$saljusger/salarios99$saljusobr) # diferencia total
salarios99$lngap_just <-  as.numeric(log(salarios99$gap_just))                # diferencia log
# Chunk 9: salario percibido y justo 2009
salarios09 <- cl09 %>% select(V5,
V23,V25, # Salario percibio obrero y gerente
V28,V30) # Salario justo    obrero y gerente
# table(salarios09$V23) # cuanto gana GERENTE
# table(salarios09$V25) # cuanto gana OBRERO
# table(salarios09$V28) # cuando deberia ganar GERENTE
# table(salarios09$V30) # cuanto deberia ganar OBRERO
salarios09$V23[salarios09$V23 %in%c(-99,-98,-97,999999999996)] <- NA
salarios09$V25[salarios09$V25 %in%c(-99,-98,-97)]              <- NA
salarios09$V28[salarios09$V28 %in%c(-99,-98,-97)]              <- NA
salarios09$V30[salarios09$V30 %in%c(-99,-98,-97)]              <- NA
salarios09$V5 <- as_character(salarios09$V5)
#--- Nombres sustantivos para analisis
salarios09 <- rename(salarios09,pais=V5,salperger=V23,salperobr=V25,saljusger=V28,saljusobr=V30)
# Chunk 10: remover outliers 2009
table(salarios09$salperobr) #   80     150     158     160     180     190     200     300
table(salarios09$saljusobr) #   190      230      250      300      350      500
table(salarios09$salperger) # 5000     10000     20000
table(salarios09$saljusger)
#Quitar outliers *************************
sal09 <- salarios09 %>% filter(salperobr>300 & saljusobr>500 & salperger >=100000 & saljusger >=100000)
# Filtrato por outliers < a $22.000.000 en salario percibido obrero
# Filtrato por outliers < a $30.000.000 en salario justo obrero
sal09$gap_perc  <-  as.numeric(sal09$salperger/sal09$salperobr) # brecha total salario percibido
sal09$gap_just  <-  as.numeric(sal09$saljusger/sal09$saljusobr) # brecha total salario justo
# Chunk 11: gap salario 2009
#---Brecha salarial percibida
salarios09$gap_perc   <-  as.numeric(salarios09$salperger/salarios09$salperobr) # diferencia total
salarios09$lngap_perc <-  as.numeric(log(salarios09$gap_perc))                # diferencia log
#---Brecha salarial justa
salarios09$gap_just   <-  as.numeric(salarios09$saljusger/salarios09$saljusobr) # diferencia total
salarios09$lngap_just <-  as.numeric(log(salarios09$gap_just))                # diferencia log
# Chunk 12: salario percibido y justo 2019
salarios19 <- cl19 %>% select(M2_P2_PRESIDENTE,M2_P2_OBRERO,  # Salario percibio obrero y gerente
M2_P3_PRESIDENTE,M2_P3_OBRERO) # Salario justo    obrero y gerente
# table(salarios19$M2_P2_PRESIDENTE) # cuanto gana GERENTE
# table(salarios19$M2_P2_OBRERO)     # cuanto gana OBRERO
# table(salarios19$M2_P3_PRESIDENTE) # cuando deberia ganar GERENTE
# table(salarios19$M2_P3_OBRERO )    # cuanto deberia ganar OBRERO
# salarios09$V23[salarios09$V23 %in%c(-99,-98,-97,999999999996)] <- NA
# salarios09$V25[salarios09$V25 %in%c(-99,-98,-97)]              <- NA
# salarios09$V28[salarios09$V28 %in%c(-99,-98,-97)]              <- NA
# salarios09$V30[salarios09$V30 %in%c(-99,-98,-97)]              <- NA
#--- Nombres sustantivos para analisis
salarios19 <- rename(salarios19,salperger=M2_P2_PRESIDENTE,salperobr=M2_P2_OBRERO,
saljusger=M2_P3_PRESIDENTE,saljusobr=M2_P3_OBRERO)
# Chunk 13: remover outliers 2019
table(salarios19$salperobr) # 500
table(salarios19$saljusobr) # 300     500     600     800
table(salarios19$salperger) # ok
table(salarios19$saljusger) # ok
#Quitar outliers *************************
sal19 <- salarios19 %>% filter(salperobr>500 & saljusobr>800)
# Filtrato por outliers < a $22.000.000 en salario percibido obrero
# Filtrato por outliers < a $30.000.000 en salario justo obrero
sal19$gap_perc  <-  as.numeric(sal19$salperger/sal19$salperobr) # brecha total salario percibido
sal19$gap_just  <-  as.numeric(sal19$saljusger/sal19$saljusobr) # brecha total salario justo
# Chunk 14: gap salario 2019
#---Brecha salarial percibida
salarios19$gap_perc   <-  as.numeric(salarios19$salperger/salarios19$salperobr) # diferencia total
salarios19$lngap_perc <-  as.numeric(log(salarios19$gap_perc))                  # diferencia log
#---Brecha salarial justa
salarios19$gap_just   <-  as.numeric(salarios19$saljusger/salarios19$saljusobr) # diferencia total
salarios19$lngap_just <-  as.numeric(log(salarios19$gap_just))                # diferencia log
# Chunk 15: descriptivos brecha total 1999-2019
# Tabla 1 ****************************************************************************************
table1<- rbind(psych::describe(salarios99$gap_perc),
psych::describe(salarios09$gap_perc),
psych::describe(salarios19$gap_perc))
rownames(table1) <- c("1999","2009","2019")
table1 <- table1 %>% select(n,mean,sd,median,trimmed,min,max)
kable(table1,row.names = TRUE, digits = 2,caption = "Brecha total de salario percibido por año") %>% kable_styling()
# Tabla 2 ****************************************************************************************
table2<- rbind(psych::describe(salarios99$gap_just),
psych::describe(salarios09$gap_just),
psych::describe(salarios19$gap_just))
rownames(table2) <- c("1999","2009","2019")
table2 <- table2 %>% select(n,mean,sd,median,trimmed,min,max)
kable(table2,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de salario justo por año") %>% kable_styling()
# Tabla 3 ****************************************************************************************
table3<- rbind(psych::describe(sal99$gap_just),
psych::describe(sal09$gap_just),
psych::describe(sal19$gap_just))
rownames(table3) <- c("1999","2009","2019")
table3 <- table3 %>% select(n,mean,sd,median,trimmed,min,max)
kable(table3,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de salario justo por año") %>% kable_styling() %>%
footnote(general = "Calculo realizado sin casos extremos superiores e inferiores \n Media recortada sin el 5% de cada extremo")
# Tabla 4 ****************************************************************************************
table4<- rbind(psych::describe(sal99$gap_perc),
psych::describe(sal09$gap_perc),
psych::describe(sal19$gap_perc))
rownames(table4) <- c("1999","2009","2019")
table4 <- table4 %>% select(n,mean,sd,median,trimmed,min,max)
kable(table4,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de salario percibido por año") %>% kable_styling() %>%
footnote(general = "Calculo realizado sin casos extremos superiores e inferiores \n Media recortada sin el 5% de cada extremo")
# Chunk 16: Tablas descriptivos ln(gaps)
# Tabla 1 ****************************************************************************************
table1b<- rbind(psych::describe(log(salarios99$gap_perc)),
psych::describe(log(salarios09$gap_perc)),
psych::describe(log(salarios19$gap_perc)))
rownames(table1b) <- c("1999","2009","2019")
table1b <- table1b %>% select(n,mean,sd,median,trimmed,min,max)
kable(table1b,row.names = TRUE, digits = 2,caption = "Brecha total de ln(salario percibido) por año") %>% kable_styling()
# Tabla 2 ****************************************************************************************
table2b<- rbind(psych::describe(log(salarios99$gap_just)),
psych::describe(log(salarios09$gap_just)),
psych::describe(log(salarios19$gap_just)))
rownames(table2b) <- c("1999","2009","2019")
table2b <- table2b %>% select(n,mean,sd,median,trimmed,min,max)
kable(table2b,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de ln(salario justo) por año") %>% kable_styling()
# Tabla 3 ****************************************************************************************
table3b<- rbind(psych::describe(log(sal99$gap_just)),
psych::describe(log(sal09$gap_just)),
psych::describe(log(sal19$gap_just)))
rownames(table3b) <- c("1999","2009","2019")
table3b <- table3b %>% select(n,mean,sd,median,trimmed,min,max)
kable(table3b,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de ln(salario justo) por año") %>% kable_styling() %>%
footnote(general = "Calculo realizado sin casos extremos superiores e inferiores \n Media recortada sin el 5% de cada extremo")
# Tabla 4 ****************************************************************************************
table4b<- rbind(psych::describe(log(sal99$gap_perc)),
psych::describe(log(sal09$gap_perc)),
psych::describe(log(sal19$gap_perc)))
rownames(table4b) <- c("1999","2009","2019")
table4b <- table4b %>% select(n,mean,sd,median,trimmed,min,max)
kable(table4b,row.names = TRUE, digits = 2,caption = "Tabla: Brecha total de ln(salario percibido) por año") %>% kable_styling() %>%
footnote(general = "Calculo realizado sin casos extremos superiores e inferiores \n Media recortada sin el 5% de cada extremo")
# Chunk 17
ggplot() +
geom_density(data = sal99,aes(x = log(gap_just),fill="1999", alpha=0.9)) +
geom_density(data = sal09,aes(x = log(gap_just),fill="2009", alpha=0.5)) +
geom_density(data = sal19,aes(x = log(gap_just),fill="2019", alpha=0.5)) +
geom_vline(xintercept = median(log(sal99$gap_just),na.rm = TRUE), linetype="dashed",color = "black",    size=1.5)+
geom_vline(xintercept = median(log(sal09$gap_just),na.rm = TRUE), linetype="dotted",color = "navyblue", size=1.5)+
geom_vline(xintercept = median(log(sal19$gap_just),na.rm = TRUE), linetype="dotted",color = "darkgreen",size=1.5)+
xlab(label = "Salario justo Ln(Gerente/Obrero)")+
guides(fill = guide_legend("Año"), alpha=FALSE) +
theme_classic()
ggplot() +
geom_density(data = sal99,aes(x = log(gap_just),fill="1999", alpha=0.9)) +
geom_density(data = sal09,aes(x = log(gap_just),fill="2009", alpha=0.5)) +
geom_density(data = sal19,aes(x = log(gap_just),fill="2019", alpha=0.5)) +
geom_vline(xintercept = median(log(sal99$gap_just),na.rm = TRUE), linetype="dashed",color = "black",    size=1.5)+
geom_vline(xintercept = median(log(sal09$gap_just),na.rm = TRUE), linetype="dotted",color = "navyblue", size=1.5)+
geom_vline(xintercept = median(log(sal19$gap_just),na.rm = TRUE), linetype="dotted",color = "darkgreen",size=1.5)+
xlab(label = "Salario justo Ln(Gerente/Obrero)")+
guides(fill = guide_legend("Año"), alpha=FALSE) +
theme_classic()
merit99 <- cl99 %>% select(V4:V8,V49:V55)
merit99$V4 <- car::recode(merit99$V4,"c(8,9)=NA",as.numeric = TRUE)
merit99$V5 <- car::recode(merit99$V5,"c(8,9)=NA",as.numeric = TRUE)
merit99$V6 <- car::recode(merit99$V6,"c(8,9)=NA",as.numeric = TRUE)
merit99$V7 <- car::recode(merit99$V7,"c(8,9)=NA",as.numeric = TRUE)
merit99$V8 <- car::recode(merit99$V8,"c(8,9)=NA",as.numeric = TRUE)
merit99$V4 <- sjmisc::rec(merit99$V4,rec="rev")
merit99$V5 <- sjmisc::rec(merit99$V5,rec="rev")
merit99$V6 <- sjmisc::rec(merit99$V6,rec="rev")
merit99$V7 <- sjmisc::rec(merit99$V7,rec="rev")
merit99$V8 <- sjmisc::rec(merit99$V8,rec="rev")
merit99 <- rename(merit99,
wfami = V4,
knope = V5,
refor = V6,
rinte = V7,
corru = V8)
poly99a <- psych::polychoric(select(merit99,c(wfami,knope,refor,rinte,corru)),na.rm = TRUE)
corrplot::corrplot.mixed(poly99a$rho,order = "AOE")
library(GPArotation)
sjPlot::sjt.fa(select(merit99,c(wfami,knope,refor,rinte)),
method = "wls",
nmbr.fctr = 2,
title="Analisis Factorial 1999 Percepcion")
m1per99 <- '
gah_nmerit=~wfami+knope+corru
recom=~refor+rinte
'
fit1 <- cfa(model = m1per99,data = merit99)
summary(fit1, fit.measures=TRUE, standardized=TRUE)
sumfit1<- summary(fit1, fit.measures=TRUE, standardized=TRUE)
inspect(sumfit1)
semPaths(fit1)
semPaths(fit1,what = "std")
semPaths(fit1,what = "std",curve = 4)
semPaths(fit1,what = "std",curve = 4)
semPlot::semPaths(fit1, "std",
edge.color = "black",
style = "ram",
exoVar = TRUE,
intercepts = F,
thresholds = F,
fade =F)
semPlot::semPaths(fit1, "std",
style = "ram",
exoVar = TRUE,
intercepts = F,
thresholds = F,
fade =F)
semPlot::semPaths(fit1, "std",
edge.color = "black",
style = "ram",
exoVar = TRUE,
intercepts = F,
thresholds = F,
fade =F)
fitmeasures(fit1)
fitmeasures(fit1,fit.measures = c("chisq","df"))
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
kable(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")),
)
kable(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")),
) %>% kable_styling()
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
kable(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")),col.names = "Ajuste"
) %>% kable_styling()
kable(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")),col.names = "Ajuste",digits = 3,
) %>% kable_styling()
kable(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")),col.names = "Ajuste",digits = 2,
) %>% kable_styling()
semPlot::semPaths(fit1, "std",
edge.color = "black",
style = "ram",
exoVar = TRUE,
intercepts = F,
thresholds = F,
fade =F)
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
semPlot::semPaths(fit1, "std",
edge.color = "black",
style = "ram",
exoVar = TRUE,
intercepts = F,
thresholds = F,
fade =F)
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
c(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")))
c(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")))
data.frame(c(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))))
t(data.frame(c(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")))))
c(fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea")))
fitmeasures(fit1,fit.measures = c("chisq","df", "tli","cfi","rmsea"))
install.packages("semTable")
semTable::compareLavaan(models = fit1,fitmeas = c("chisq","df", "tli","cfi","rmsea"))
?semTable()
?semTable()
semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t1"),
varLabels = c("x1" = "hello"), type = "latex", print.results = FALSE)
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"), file = file.path(tempdir, "fit1.t1"),
varLabels = c("x1" = "hello"), type = "latex", print.results = FALSE)
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"),
varLabels = c("x1" = "hello"), type = "html")
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"),
varLabels = c("x1" = "hello"), type = "html") %>% kable_styling()
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"),
varLabels = c("x1" = "hello"), type = "text")
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq", "rmsea"),
varLabels = c("x1" = "hello"))
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq","cfi", "rmsea"))
semTable::semTable(fit1, columns = c("estse", "p"),
fits = c("chisq","cfi", "rmsea"),type = "html")
here()
